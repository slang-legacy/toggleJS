!!! 5
html
	head
		meta(charset='utf-8')
		title toggleJS
		script(type='text/javascript', src='./js/jquery-1.7.1.js')
		script(type='text/javascript', src='./js/easing.1.3.js')
		script(type='text/javascript', src='./js/metadata.js')
		script(type='text/javascript', src='./js/toggle.js')
		script(type='text/javascript', src='./js/demo.js')
		script(type='text/javascript')
			function debug() {
				if(window.console && window.console.log) console.log(arguments);
			}
			$(document).ready(function() {
				$(".group").toggleSwitch({
					init: function() {
						debug("init", arguments);
					},
					change: function() {
						debug("change", arguments);
					},
					click: function() {
						debug("click", arguments);
					},
					disable: function() {
						debug("disable", arguments);
					},
					destroy: function() {
						debug("destroy", arguments);
					}
				});
				$("#radio_allowRadioUncheck :radio").toggleSwitch({
					allowRadioUncheck: true
				});
				$("#ex11")
				// attach the toggle behavior
				.toggleSwitch({
					labelOn: "Yes",
					labelOff: "No",
					change: function($input) {
						// update the text based on the status of the checkbox
						$("#send-email").html($input.is(":checked") ? "Yes, send me more e-mail!" : "Ugh... no more e-mail already!");
					}
				})
				// trigger the change event (to update the text)
				.trigger("change");
			});
		link(type='text/css', href='./css/toggle.css', rel='stylesheet', media='all')
		link(type='text/css', href='./css/demo.css', rel='stylesheet', media='all')
	body(onload='prettyPrint()')
		a(href='https://github.com/toggleJS/toggleJS')
			img(style='position: absolute; top: 0; right: 0; border: 0;', src='http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png', alt='Fork me on GitHub')
		#container
			.download
				a(href='https://github.com/toggleJS/toggleJS/zipball/master')
					img(border='0', width='90', src='https://github.com/images/modules/download/zip.png')
				a(href='https://github.com/toggleJS/toggleJS/tarball/master')
					img(border='0', width='90', src='https://github.com/images/modules/download/tar.png')
			h1
				a(href='https://github.com/toggleJS/toggleJS') toggleJS
			.description
				| ToggleJS is a jQuery plug-in that emulates the checkbox functionality
				| used by the iPhone. It is based on iButton by Giva Labs, however has rewritten
				| CSS to LESS, and no longer requires any images.
			h2 Author
			p Sean Lang <slang800@gmail.com>
				br
			h2 Download
			p
				| You can download this project in either
				a(href='https://github.com/toggleJS/toggleJS/zipball/master') zip
				| or
				a(href='https://github.com/toggleJS/toggleJS/tarball/master')
					| tar formats.
			p
				| You can also clone the project with
				a(href='http://git-scm.com') Git
				| by running:
			pre.
				\n\t\t\t\t$ git clone git://github.com/toggleJS/toggleJS
				\t\t\t        
			.footer
				| get the source code on GitHub :
				a(href='https://github.com/toggleJS/toggleJS') toggleJS
			h2
				| toggleJS Examples
			p
				| The examples below show off various features of the toggleJS widget and
				| provide you with the source code to duplicate the functionality on your
				| own web page. We also recommend you sample the keyboard compatibility by
				| tabbing through the elements and use the spacebar to toggle checkbox elements
				| and the arrow keys to select the radio elements.
			h4
				| Simple Checkboxes
			p
				| This shows off the most simple form of the toggle. The buttons below are
				| based purely on the attributes of the checkbox elements.
			#simple.group
				.row
					label.label(for='ex01')
						| Default Off
					input#ex01(type='checkbox')
				.row
					label.label(for='ex02')
						| Default On
					input#ex02(type='checkbox', checked='checked')
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> $(document).ready(function
				\t\t\t\t(){ $(":checkbox").toggleSwitch(); }); </script>
				\t\t\t        
			h4
				| Using Metadata
			p
				| You can also utilize the
				a(href='http://plugins.jquery.com/project/metadata') jQuery Metadata Plug-in
				| to change the options on each element individually:
			#metadata.group
				.row
					label.label(for='ex03')
						| Yes/no label
					input#ex03.{labelOn:.'Yes',.labelOff:.'No'}(type='checkbox')
				.row
					label.label(for='ex04')
						| True/false label
					input#ex04.{labelOn:.'True',.labelOff:.'False',.easing:.'easeOutBounce',.duration:.500}(type='checkbox')
					| (with easeOutBounce easing animation)
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> $(document).ready(function
				\t\t\t\t(){ $(":checkbox").toggleSwitch(); }); </script> <div class="row">
				\t\t\t\t<label class="label" for="ex03">Yes/no label</label> <input
				\t\t\t\ttype="checkbox" id="ex03" class="{labelOn: 'Yes', labelOff: 'No'}" />
				\t\t\t\t</div> <div class="row"> <label class="label" for="ex04">True/false
				\t\t\t\tlabel</label> <input type="checkbox" id="ex04" class="{labelOn:
				\t\t\t\t'True', labelOff: 'False', easing: 'easeOutBounce', duration: 500}" />
				\t\t\t\t(with easeOutBounce easing animation) </div>
				\t\t\t        
			h4
				| API Examples
			p
				| The toggle plug-in API methods are also easy to use. The API allows you
				| to do things such as changing the value of the element, disabling the element
				| and remove the toggle widget to restore the checkbox to it's original HTML.
			#api.group
				.row
					label.label(for='ex05')
						| Enable/Disable
					input#ex05(type='checkbox', disabled='true')
					input.button(type='button', value='Disable/Enable Button', onclick='$(\'#ex05\').toggleSwitch(\'disable\')')
				.row
					label.label(for='ex06')
						| Destroy/Create
					input#ex06(type='checkbox')
					input.button(type='button', value='Destroy/Create Button', onclick='$(\'#ex06\').toggleSwitch(\'destroy\')')
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> // toggle button's enable/disabled
				\t\t\t\tstatus $("#ex05").toggleSwitch("disable"); // destroy an toggle widget
				\t\t\t\t$("#ex06").toggleSwitch("destroy"); </script>
				\t\t\t        
			h4
				| Radio Button Example
			p
				| Below is an example of attaching the toggle behavior to a group of radio
				| buttons. Only one of the options can be checked at a time. While this UI
				| construct works best for checkbox elements (since the state is either true
				| or false) radio buttons can be handle if you want the user to be able to
				| select only one option from a list.
			#radio.group
				.row
					label.label(for='ex07-1')
						| Option 1
					input#ex07-1(type='radio', name='ex-radio')
				.row
					label.label(for='ex07-2')
						| Option 2
					input#ex07-2(type='radio', name='ex-radio')
				.row
					label.label(for='ex07-3')
						| Option 3
					input#ex07-3(type='radio', name='ex-radio')
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> $(document).ready(function
				\t\t\t\t(){ $(":radio").toggleSwitch(); }); </script>
				\t\t\t        
			h4
				| Radio Button Example (w/ Radio Uncheck Allowed)
			p
				| Below is an example of attaching the toggle behavior to a group of radio
				| buttons. Only one of the options can be checked at a time. While this UI
				| construct works best for checkbox elements (since the state is either true
				| or false) radio buttons can be handle if you want the user to be able to
				| select only one option from a list.
			#radio_allowRadioUncheck
				.row
					label.label(for='ex08-1')
						| Option 1
					input#ex08-1(type='radio', name='ex-radio-allowRadioUncheck')
				.row
					label.label(for='ex08-2')
						| Option 2
					input#ex08-2(type='radio', name='ex-radio-allowRadioUncheck')
				.row
					label.label(for='ex08-3')
						| Option 3
					input#ex08-3(type='radio', name='ex-radio-allowRadioUncheck')
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> $(document).ready(function
				\t\t\t\t(){ $("#radio_allowRadioUncheck :radio").toggleSwitch({allowRadioUncheck:
				\t\t\t\ttrue}); }); </script>
				\t\t\t        
			h4
				| Size Button via CSS
			p
				| You can also use CSS to control the look and feel of the toggle. Below
				| we've used CSS to make a wide button with a narrow handle.
			#css.group
				.row
					label.label(for='ex09')
						| Wide button
					input#ex09(type='checkbox')
			pre.prettyprint.
				\n\t\t\t\t<style type="text/css"> #css .toggle-container { width:
				\t\t\t\t175px; } #css .toggle-container .toggle-handle { width: 5px; } </style>
				\t\t\t        
			h4
				| Custom Labels of Various Sizes
			p
				| You can also use long and short labels paired together.
			#long-labels.group
				.row
					label.label(for='ex10')
						| Long labels
					input#ex10.{labelOn:.'A.really,.really.long.label',.labelOff:.'Tiny'}(type='checkbox', checked='checked')
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> $("#ex10").toggleSwitch({
				\t\t\t\tlabelOn: "A really, really long label" , labelOff: "Tiny" }); </script>
				\t\t\t        
			h4
				| Using Events
			p
				| Events allow you to expand the functionality of the plug-in by performing
				| additional tasks when certain events are fired. Below the
				em
					| change
				| event is used to update text based on the value of the checkbox.
			#events
				.row
					label.label(for='ex11')
						| Send e-mail
					input#ex11(type='checkbox')
					span#send-email
			pre.prettyprint.
				\n\t\t\t\t<script type="text/javascript"> $("#ex11") // attach the
				\t\t\t\ttoggle behavior .toggleSwitch({ labelOn: "Yes" , labelOff: "No" , change:
				\t\t\t\tfunction ($input){ // update the text based on the status of the checkbox
				\t\t\t\t$("#send-email").html($input.is(":checked") ? "Yes, send me more e-mail!"
				\t\t\t\t: "Ugh... no more e-mail already!"); } }) // trigger the change event (to
				\t\t\t\tupdate the text) .trigger("change"); </script>
				\t\t\t        
